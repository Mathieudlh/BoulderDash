package gameframe;import model.Entityable;import javax.swing.*;import java.awt.*;import java.awt.image.BufferedImage;import java.util.ArrayList;import java.util.Observable;import java.util.Observer;/** * Created by mathi on 20/06/2017. */public class GamePanel extends JPanel implements Observer {    /**     * Map     */    private BufferedImage map;    /**     * Entities     */    private ArrayList<Entityable> entities;    /**     * Score of the map     */    private String score;    /**     * Constructor     */    public GamePanel(/*IGraphicsBuilder graphicsBuilder*/) {        map = new BufferedImage(1, 1, BufferedImage.TYPE_INT_RGB);    }    /**     * @param o     * @param arg     */    @Override    public void update(Observable o, Object arg) {    }    /**     * @param graphics     */    @Override    public void paintComponent(Graphics graphics) {        Graphics2D g2 = (Graphics2D) graphics;        g2.scale(1.5, 1.5);        g2.translate(0, 0);        graphics.drawImage(map, 0, 0, null);        if(entities != null) {            for(Entityable entity : entities) {                graphics.drawImage(entity.getImage(), entity.getX(), entity.getY(), null);            }        }        graphics.setColor(Color.WHITE);        graphics.fillRoundRect(0, 0, 75, 20, 10, 10);        g2.setColor(Color.DARK_GRAY);        g2.drawString("Score: " + score, 5, 15);    }    /**     * @param imageMap     */    public void setImageMap(BufferedImage imageMap) {        this.map = imageMap;        this.repaint();    }    /**     * @param entities     */    public void setEntities(ArrayList<Entityable> entities) {        this.entities = entities;        this.repaint();    }    /**     * @param score     */    public void setScore(String score) {        this.score = score;        this.repaint();    }}